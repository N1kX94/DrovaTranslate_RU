#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã Drova
–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø–∞–ø–∫–∏ en1 (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è) –∏ en2 (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç markdown –æ—Ç—á–µ—Ç —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
"""

import os
import re
from pathlib import Path
from collections import defaultdict
from datetime import datetime

def parse_loc_file(file_path):
    """–ü–∞—Ä—Å–∏—Ç .loc —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞"""
    entries = {}
    order = []  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∫–ª—é—á–µ–π
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π —Ç–∏–ø–∞ "key { value }"
        pattern = r'(\w+)\s*\{\s*([^}]*)\s*\}'
        matches = re.findall(pattern, content, re.MULTILINE | re.DOTALL)
        
        for key, value in matches:
            # –û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
            clean_value = value.strip()
            entries[key] = clean_value
            order.append(key)
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
    
    return entries, order

def get_all_loc_files(directory):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ .loc —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    loc_files = {}
    file_orders = {}
    directory_path = Path(directory)
    
    if not directory_path.exists():
        print(f"–ü–∞–ø–∫–∞ {directory} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return loc_files, file_orders
    
    for file_path in directory_path.rglob("*.loc"):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫–∞–∫ –∫–ª—é—á
        relative_path = file_path.relative_to(directory_path)
        entries, order = parse_loc_file(file_path)
        loc_files[str(relative_path)] = entries
        file_orders[str(relative_path)] = order
    
    return loc_files, file_orders

def compare_localization(en1_dir, en2_dir):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–µ –≤–µ—Ä—Å–∏–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ en1...")
    old_files, old_orders = get_all_loc_files(en1_dir)
    
    print("–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ en2...")
    new_files, new_orders = get_all_loc_files(en2_dir)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    results = {
        'new_files': {},      # –ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        'deleted_files': {},  # –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        'modified_files': {}, # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        'unchanged_files': []  # –ù–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    }
    
    # –í—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    all_files = set(old_files.keys()) | set(new_files.keys())
    
    for file_name in sorted(all_files):
        old_entries = old_files.get(file_name, {})
        new_entries = new_files.get(file_name, {})
        
        if file_name not in old_files:
            # –ù–æ–≤—ã–π —Ñ–∞–π–ª
            results['new_files'][file_name] = new_entries
        elif file_name not in new_files:
            # –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            results['deleted_files'][file_name] = old_entries
        else:
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            old_order = old_orders.get(file_name, [])
            new_order = new_orders.get(file_name, [])
            changes = compare_file_entries(old_entries, new_entries, old_order, new_order)
            if changes['added'] or changes['modified'] or changes['deleted']:
                results['modified_files'][file_name] = changes
            else:
                results['unchanged_files'].append(file_name)
    
    return results

def compare_file_entries(old_entries, new_entries, old_order, new_order):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ –¥–≤—É—Ö –≤–µ—Ä—Å–∏—è—Ö —Ñ–∞–π–ª–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞"""
    changes = {
        'added': [],     # –ù–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ (—Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞)
        'modified': [],  # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        'deleted': []    # –£–¥–∞–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    }
    
    # –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ –Ω–æ–≤–æ–º —Ñ–∞–π–ª–µ)
    for key in new_order:
        if key not in old_entries:
            changes['added'].append((key, new_entries[key]))
    
    # –£–¥–∞–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ —Å—Ç–∞—Ä–æ–º —Ñ–∞–π–ª–µ)
    for key in old_order:
        if key not in new_entries:
            changes['deleted'].append((key, old_entries[key]))
    
    # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ –Ω–æ–≤–æ–º —Ñ–∞–π–ª–µ)
    for key in new_order:
        if key in old_entries and old_entries[key] != new_entries[key]:
            changes['modified'].append((key, {
                'old': old_entries[key],
                'new': new_entries[key]
            }))
    
    return changes

def generate_markdown_report(results, output_file):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç markdown –æ—Ç—á–µ—Ç"""
    
    total_new_entries = sum(len(entries) for entries in results['new_files'].values())
    total_modified_entries = sum(
        len(changes['added']) + len(changes['modified']) + len(changes['deleted'])
        for changes in results['modified_files'].values()
    )
    total_deleted_entries = sum(len(entries) for entries in results['deleted_files'].values())
    
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(f"# –û—Ç—á–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ Drova\n\n")
        f.write(f"**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        
        # –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        f.write("## üìä –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n")
        f.write("| –¢–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ |\n")
        f.write("|---------------|------------|\n")
        f.write(f"| üÜï –ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã | {len(results['new_files'])} |\n")
        f.write(f"| ‚ùå –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã | {len(results['deleted_files'])} |\n")
        f.write(f"| üìù –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã | {len(results['modified_files'])} |\n")
        f.write(f"| ‚úÖ –ù–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã | {len(results['unchanged_files'])} |\n")
        f.write(f"| üî§ –í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π | {total_new_entries} |\n")
        f.write(f"| üîÑ –í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∑–∞–ø–∏—Å—è—Ö | {total_modified_entries} |\n")
        f.write(f"| üóëÔ∏è –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π | {total_deleted_entries} |\n\n")
        
        # –ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        if results['new_files']:
            f.write("## üÜï –ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã\n\n")
            for file_name, entries in sorted(results['new_files'].items()):
                f.write(f"### `{file_name}`\n\n")
                f.write(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:** {len(entries)}\n\n")
                
                if entries:
                    f.write("| –ö–ª—é—á | –¢–µ–∫—Å—Ç |\n")
                    f.write("|------|-------|\n")
                    for key, value in sorted(entries.items()):
                        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è markdown
                        safe_value = value.replace('|', '\\|').replace('\n', '<br>').replace('*', '\\*')
                        f.write(f"| `{key}` | {safe_value} |\n")
                    f.write("\n")
        
        # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if results['modified_files']:
            f.write("## üìù –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã\n\n")
            for file_name, changes in sorted(results['modified_files'].items()):
                f.write(f"### `{file_name}`\n\n")
                
                # –ù–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª–µ
                if changes['added']:
                    f.write(f"#### ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ ({len(changes['added'])})\n\n")
                    f.write("| –ö–ª—é—á | –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç |\n")
                    f.write("|------|-------------|\n")
                    for key, value in changes['added']:
                        safe_value = value.replace('|', '\\|').replace('\n', '<br>').replace('*', '\\*')
                        f.write(f"| `{key}` | {safe_value} |\n")
                    f.write("\n")
                
                # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                if changes['modified']:
                    f.write(f"#### üîÑ –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ ({len(changes['modified'])})\n\n")
                    f.write("| –ö–ª—é—á | –°—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç | –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç |\n")
                    f.write("|------|-------------|-------------|\n")
                    for key, change in changes['modified']:
                        safe_old = change['old'].replace('|', '\\|').replace('\n', '<br>').replace('*', '\\*')
                        safe_new = change['new'].replace('|', '\\|').replace('\n', '<br>').replace('*', '\\*')
                        f.write(f"| `{key}` | {safe_old} | {safe_new} |\n")
                    f.write("\n")
                
                # –£–¥–∞–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                if changes['deleted']:
                    f.write(f"#### ‚ûñ –£–¥–∞–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ ({len(changes['deleted'])})\n\n")
                    f.write("| –ö–ª—é—á | –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç |\n")
                    f.write("|------|----------------|\n")
                    for key, value in changes['deleted']:
                        safe_value = value.replace('|', '\\|').replace('\n', '<br>').replace('*', '\\*')
                        f.write(f"| `{key}` | {safe_value} |\n")
                    f.write("\n")
        
        # –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if results['deleted_files']:
            f.write("## ‚ùå –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã\n\n")
            for file_name, entries in sorted(results['deleted_files'].items()):
                f.write(f"### `{file_name}`\n\n")
                f.write(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:** {len(entries)}\n\n")
                
                if entries:
                    f.write("| –ö–ª—é—á | –¢–µ–∫—Å—Ç |\n")
                    f.write("|------|-------|\n")
                    for key, value in sorted(entries.items()):
                        safe_value = value.replace('|', '\\|').replace('\n', '<br>').replace('*', '\\*')
                        f.write(f"| `{key}` | {safe_value} |\n")
                    f.write("\n")
        
        # –ù–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if results['unchanged_files']:
            f.write("## ‚úÖ –ù–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã\n\n")
            for file_name in sorted(results['unchanged_files']):
                f.write(f"- `{file_name}`\n")
            f.write("\n")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéÆ –°–∫—Ä–∏–ø—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ Drova")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–æ–∫
    en1_dir = "en1"
    en2_dir = "en2"
    
    if not os.path.exists(en1_dir):
        print(f"‚ùå –ü–∞–ø–∫–∞ {en1_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print(f"–°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É {en1_dir} –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ —Ç—É–¥–∞ —Å—Ç–∞—Ä—ã–µ .loc —Ñ–∞–π–ª—ã")
        return
    
    if not os.path.exists(en2_dir):
        print(f"‚ùå –ü–∞–ø–∫–∞ {en2_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print(f"–°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É {en2_dir} –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ —Ç—É–¥–∞ –Ω–æ–≤—ã–µ .loc —Ñ–∞–π–ª—ã")
        return
    
    print(f"üìÅ –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º:")
    print(f"   –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è: {en1_dir}/")
    print(f"   –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è:  {en2_dir}/")
    print()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    results = compare_localization(en1_dir, en2_dir)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    output_file = "localization_diff_report.md"
    print(f"üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç: {output_file}")
    generate_markdown_report(results, output_file)
    
    print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_file}")
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π:")
    print(f"   üÜï –ù–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(results['new_files'])}")
    print(f"   üìù –ò–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(results['modified_files'])}")
    print(f"   ‚ùå –£–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(results['deleted_files'])}")

if __name__ == "__main__":
    main() 